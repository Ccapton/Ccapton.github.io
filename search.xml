<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java技术:Gif编码器(gifencoder)的实际应用(2)]]></title>
    <url>%2F2017%2F08%2F27%2FJava_Technology_2%2F</url>
    <content type="text"><![CDATA[关于我，欢迎关注csdn博客：ccapton(http://blog.csdn.net/ccapton) 微信：CcaptonGithub: (https://www.github.com/ccapton)个人博客:http://www.ccapton.cn Gif合成软件： 结合前几天的gif合成框架，我用Java的swing界面编程完成了这款Gif合成软件： https://pan.baidu.com/s/1slfUkcH若前面的面链接失效，请点这里https://raw.githubusercontent.com/Ccapton/FileRepertory/master/files/GifMaker.jar 它能将若干张静态图片连接成gif图片。 mac下的效果： 输出的gif图片： 这是我将几张系统自带壁纸合成gif的过程，就不贴效果了。 在Mac下，Jar文件打开的过程中，初次生成Swing界面耗时比较长，要等10s左右；在Windows平台下则是秒开。 目前这个程序的算法只支持若干张同等尺寸的图片合成gif，而且每张图片中最好不要有透明度为0的像素点，即选取的图片要等宽等高，而且图片最好不要有透明的部分，否则透明的部分会被白色填充、或者直接合成失败。 由于gifencoder提供的api只有GifEncoder这个类，所以也没办法，功能比较单一，这个框架是square开发组织两年前的作品了，上次更新代码是9个月前，所以近期不太会有更新了，大家就随便看看吧。gifencoder框架地址 https://github.com/square/gifencoder]]></content>
      <categories>
        <category>Java技术</category>
      </categories>
      <tags>
        <tag>Java技术</tag>
        <tag>Gif</tag>
        <tag>图片处理技术</tag>
        <tag>个人作品</tag>
        <tag>Gif制作软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java技术:Gif编码器(gifencoder)的实际应用(1)]]></title>
    <url>%2F2017%2F08%2F22%2FJava_Technology_1%2F</url>
    <content type="text"><![CDATA[Gif编码器 gifencoder gifencoder 这是一个Java写的图片转Gif的框架 https://github.com/square/gifencoder 本来想搜一下视频转Gif的相关框架的，找到了一个用JavaScript写 https://github.com/vvo/gifify ，但是 我在安装其配置需求 ImageMagick 时发现 用命令$ brew install imagemagick –with-fontconfig时，安装到最后总是卡住了，去掉–with-fontconfig安装倒是能装进去，可是最后代码运行时又提醒我需要设置ImageMagick，弄来弄去还是没成功-_-!。于是便找到了图片转Gif的gifencoder这个框架 gifencoder用法 这是gifencoder的Github页上的基础用法 有关问题 但是没有交代清楚存放图片rgb颜色数据的二维整形数组该怎么获取， 在Android上，好像并没有直接获得二维数据的方法。于是我尝试了用Bitmap的copyPixelsToBuffer()方法获取一维数组，如下所示 public int[] convertImageToArray(File file) { Bitmap bitmap= BitmapFactory.decodeFile(file.getAbsolutePath()); int rgbArray[]=new int[bitmap.getAllocationByteCount()]; Buffer buffer=IntBuffer.wrap(rgbArray); bitmap.copyPixelsToBuffer(buffer); bitmap.recycle(); return rgbArray; } 然后调用GifEncoder的另一个addImage方法 /** * Add an image to the GIF file. * * @param rgbData an image buffer in RGB format * @param width the number of pixels per row in the pixel array * @param options options to be applied to this image * @return this instance for chaining * @throws IOException if there was a problem writing to the given output stream */ public GifEncoder addImage(int[] rgbData, int width, ImageOptions options) throws IOException { addImage(Image.fromRgb(rgbData, width), options); return this; } 可是当我跑起来时，不知道是不是因为参数不正确还是咋地，怎么修改都会出现手机内存吃紧”Starting a blocking GC Alloc”，最后强制退出的问题，输出的gif图片也是只有1kb，即转换失败了，我觉得一开始获取一维数组的时候出现问题了，导致后面数据处理时间太长了。后来我还是放弃了gitencoder在Android上的应用了,果断选择在桌面端Java平台上继续试。 桌面端Java使用gitencoder我使用的是IntelliJ IDEA,直接下载jar包，引入java工程内,我使用这个框架的代码就下面这么点，就能输出想要的gif图片 import com.squareup.gifencoder.GifEncoder; import com.squareup.gifencoder.ImageOptions; import javax.imageio.ImageIO; import java.awt.image.BufferedImage; import java.io.*; public class Main { public static void main(String[] args) { // 读取图片到BufferedImage BufferedImage bf = readImage("/Users/capton/Desktop/apple1.png");//这里写你要读取的绝对路径+文件名 BufferedImage bf2 = readImage("/Users/capton/Desktop/apple2.png");//这里写你要读取的绝对路径+文件名 BufferedImage bf3 = readImage("/Users/capton/Desktop/apple3.png");//这里写你要读取的绝对路径+文件名 BufferedImage bf4 = readImage("/Users/capton/Desktop/apple4.png");//这里写你要读取的绝对路径+文件名 BufferedImage bf5 = readImage("/Users/capton/Desktop/apple5.png");//这里写你要读取的绝对路径+文件名 // 将图片转换为二维数组 int[][] rgbArray1 = convertImageToArray(bf); int[][] rgbArray2= convertImageToArray(bf2); int[][] rgbArray3= convertImageToArray(bf3); int[][] rgbArray4= convertImageToArray(bf4); int[][] rgbArray5= convertImageToArray(bf5); OutputStream outputStream = null; try { outputStream = new FileOutputStream("/Users/capton/Desktop/apple.gif"); ImageOptions options = new ImageOptions(); GifEncoder encoder=new GifEncoder(outputStream, 161, 182, 0); encoder.addImage(rgbArray1, options); encoder.addImage(rgbArray2, options); encoder.addImage(rgbArray3, options); encoder.addImage(rgbArray4, options); encoder.addImage(rgbArray5, options); encoder.finishEncoding(); } catch (FileNotFoundException e) { e.printStackTrace(); }catch (IOException e){ e.printStackTrace(); } finally{ try { outputStream.close(); } catch (IOException e) { e.printStackTrace(); } } } public static BufferedImage readImage(String imageFile){ File file = new File(imageFile); BufferedImage bf = null; try { bf = ImageIO.read(file); } catch (IOException e) { e.printStackTrace(); } return bf; } public static int[][] convertImageToArray(BufferedImage bf) { // 获取图片宽度和高度 int width = bf.getWidth(); int height = bf.getHeight(); // 将图片sRGB数据写入一维数组 int[] data = new int[width*height]; bf.getRGB(0, 0, width, height, data, 0, width); // 将一维数组转换为为二维数组 int[][] rgbArray = new int[height][width]; for(int i = 0; i < height; i++) for(int j = 0; j < width; j++) rgbArray[i][j] = data[i*width + j]; return rgbArray; } } 其中’ GifEncoder encoder=new GifEncoder(outputStream, 161, 182, 0);’这里161，182是图片的宽高(px),我们要把每一张图片的宽高都统一，然后把宽高通过这句代码设置完毕 5张不同方向黑白渐变的苹果logo，把它们整合成gif后，就出现下面的效果了 后记这里使用了BufferImage这个类，它是基于java的AWT控件的，而Android上并不支持AWT，于是也就不能用BufferImage了，之前我的方法又不对。所以请问大家，有谁知道怎么在Android上使用这个gifencoder框架的吗？在这之后，我打算仔细研究一些这个框架，用AWT把它做出图像界面来，这样方便大家使用这样一个java版的图片转Gif软件可好？]]></content>
      <categories>
        <category>Java技术</category>
      </categories>
      <tags>
        <tag>Java技术</tag>
        <tag>Gif</tag>
        <tag>图片处理技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自制简易音乐播放器（未完成）数据来源：QQ音乐]]></title>
    <url>%2F2017%2F08%2F20%2Fmusic%2F</url>
    <content type="text"><![CDATA[数据源本来只想重新练练RecyclerView的，一不小心又弄得复杂了。。。 无意中想起来搞个网络音乐播放器，本地的就算了，目前没时间去仔细弄了，但是这个没有多深入的逻辑控制，只是简单的播放逻辑，这也是很折磨人啊，大家看看就好了。于是上网搜了一下免费的音乐api，误打误撞找到一个用Java写的几个国内音乐搜索（QQ音乐，酷狗，虾米，网易云音乐）接口 https://github.com/Qrilee/MusicuuApi 请直接拷贝代码到你的工程里去，jar包也直接拷到libs下。 其中网易云好像被封了，访问不了，反正经过我的测试返回404信息。 在WyMusic、NetUtil类中，导入的sun.misc.BASE64Encoder 这个工具类必须换为 android.util.Base64，因为android中没有BASE64Encoder，取而代之的是Base64。其中的方法也按要需求调用，WyMusic.java中，我是这样使用的 String retval = Base64.encodeToString(md5Bytes,Base64.DEFAULT); Base64工具类使用位置 WyMusic这个是网易云音乐的类，还有NetUtil类中也用到了Base64工具类，如果你想用的话请注意这点哟。 效果图好吧，直接看我写的播放器效果吧。 搜索页面。这个程序有一些bug，不过也没关系啦，能听就行，后台也不会挂掉有一些图标是自己画的，你们看得出来吗？好吧，肯定看不出来。啦啦啦。播放控件中的播放顺序四个模式的图标和右边的播放列表图标是我用AI画的，实在是觉得网上的图标太丑了，颜色还要自己调，不如直接用AI画出来，简单的线条UI还是能弄出来的 搜索页面，时间很长，这不怪我-_-！好吧搜索时间长也是这个搜索接口的原因，可能数据早已经通过网络获取到了，但解析时间过长吧，看原作者的后续更新吧。还有歌词的功能，这里就没去弄了，毕竟不是专业的播放器。我特别喜欢网易云音乐，可惜用这个接口目前我弄不到它的数据，网上其他方法我也找过了，几乎都是同一个方法（POST方式，添加请求头参数），这个也不例外，被服务拒绝了还是地址换了？有谁知道的吗 这是下拉菜单中的前台Notification,与音乐控制器关联着，音乐播放与界面刷新逻辑关系搞得我头大呀感觉移动端的逻辑问题很难缠，页面效果实现相比之下就了，现在那么多成熟又漂亮的第三方视图和动画，我们只需要稍微修改就能满足开发需求吧。 新闻模块，用的是极速数据提供的接口由于新闻数据api的数据有限，不像今日头条、新浪新闻等专业大户有海量数据，由于这里只是业余的程序，只需要刷出来固定的十几条最新数据就行了。 这是新闻的搜索页，也是挺长时间的，也不怪我好吗-_-?这些都是自己一字一句码出来效果，界面效果不是问题，就是逻辑关系搞得很蛋疼☹️。本来还好的Fragment，越来越臃肿，多少行代码我就不说了，简直扎心了，还好我的MainActivity，只有不到100行。因为MainActivity只管着几个Fragment的切换功能，作为Fragment的容器，几乎没有耗时的代码。 文件结构有点乱，这不是重点，毕竟只有这么十几个Java文件，要做大事的时候肯定要归类好代码文件看官们觉得咋样？没有用DataBinding这些东西，虽然早就听闻了，一看还有点难度，就放着了，以后肯定会用上的吧(现在有更好用的ButterKnife了，以后就用它了)。 令我满意的是播放顺序这块的逻辑没毛病，其他的东西就随便看看吧，哈哈。其中加载动画和播放进度条用是自己写的控件，Seekbar本来也是用自己的，后来出现bug了，不想浪费时间就用原生的了。代码有点杂乱，我就不贴了。这里给个安装包大家瞧瞧就行了， https://github.com/Ccapton/EasyPlayer/blob/master/%E4%B8%AA%E6%80%A7%E5%8C%96.apk 至于JNI开发，我还没怎么去接触诶，似乎都是要在移动端高效运行的程序才要？比如直播类等软件需要高效压缩摄像头采集的数据的算法，这就需要更接近底层的C与C++才能做到；还有大名鼎鼎的视频处理项目FFmpeg，本来在桌面端的项目，用于Android移动端简直不要太变态，很多播放器就用到了它的代码吧。需要保密的程序算法，要用到打包的so库来防止被反编译。 好了，这篇文章就到这了，主要是自己写了这么一个功能单一程序，实际对大家有用的东西估计就是下面的链接了。那么下期见。 用到的一些库、框架音乐数据源 MusicuuApi：https://github.com/Qrilee/MusicuuApi 图片加载 Glide：https://github.com/bumptech/glide 数据解析 Gson：https://github.com/google/gson 网络通信 Volley ：https://github.com/mcxiaoke/android-volley 网络通信 Okhttp：https://github.com/square/okhttp 浏览器控件 AgentWeb：https://github.com/Justson/AgentWeb 上下拉刷新控件 SmartRefreshLayout: https://github.com/scwang90/SmartRefreshLayout 左右滑动删除列表项控件 Swipemenulistview: https://github.com/baoyongzhang/SwipeMenuListView 选项拖拽控件DragGridView：https://github.com/zhaoyu87/DragGridView（用在新闻频道的选择页里） Activity滑动退出控件 SwipeBackLayout：https://github.com/ikew0ng/SwipeBackLayout （用在了新闻浏览页上） 搜索等待动画 SLView （自己写的☺）：https://github.com/Ccapton/Android-SLView 播放进度条ColorfulProgressbar（自己写的☺）: https://github.com/Ccapton/Android-ColorfulProgressBar 关于作者我的Github：https://github.com/Ccapton/ 欢迎来踩!]]></content>
      <categories>
        <category>Android个人作品</category>
      </categories>
      <tags>
        <tag>Android开发</tag>
        <tag>Android应用</tag>
        <tag>个人作品</tag>
        <tag>音乐播放器</tag>
        <tag>QQ音乐</tag>
        <tag>酷狗音乐</tag>
        <tag>网易云音乐</tag>
        <tag>虾米音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android自定义View之-ColorfulSeekbar]]></title>
    <url>%2F2017%2F08%2F18%2FAndroid%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B-ColorfulSeekbar%2F</url>
    <content type="text"><![CDATA[Android-ColorfulSeekbar 关于我，欢迎关注 博客：ccapton(http://blog.csdn.net/ccapton) 微信：Ccapton Github: (https://www.github.com/ccapton) ColorfulSeekbar这个控件是我根据前作ColorfulProgressbar https://github.com/Ccapton/Android-ColorfulProgressBar变化而来的，进度条与之相比没有变化，功能与原生Seekbar没差别。 具体用法与ColorfulProgressbar类似，这里不再赘述。 demo下载： https://raw.githubusercontent.com/Ccapton/Android-ColorfulSeekbar/master/ColorfulSeekbarDemo.apk 如何配置build.gradle(Project) allprojects { repositories { ... maven { url 'https://jitpack.io' } } } build.gradle(Module:app) dependencies { compile 'com.github.Ccapton:Android-ColorfulSeekbar:1.0' }]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
      <tags>
        <tag>Android开发</tag>
        <tag>Android</tag>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android自定义View之-ColorfulProgressbar]]></title>
    <url>%2F2017%2F08%2F14%2FAndroid%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B-ColorfulProgressbar%2F</url>
    <content type="text"><![CDATA[Android-ColorfulProgressBar 关于我，欢迎关注 博客：ccapton(http://blog.csdn.net/ccapton) 微信：Ccapton Github: (https://www.github.com/ccapton) 简介:这是一个自定义的Progressbar，效果看着还行吧，滚动的双色斜条作为进度条，有点类似Bootstrap风格。原生Progress的基本操作都有，自行观摩我的源码吧，挺简单的。 示例: 演示Demo当前是修改了视图的版本，如下图所示，第二进度条似乎更加立体了，它像是被镶嵌在了主控件中 demo下载：https://github.com/Ccapton/Android-ColorfulProgressBar/blob/master/ColorfulProgressBarDemo_1_0_3.apk 特性与原生Progress相比，感觉更漂亮一点，可以显示进度值，背景凹凸感明显，进度条效果更加立体。 原理说明额，挺简单的。不过感觉我的做法有点复杂了，我先自定义了一个View，专门作为进度条的显示图层,如下所示 然后将其布局在高度不超过20dp的ColorfulProgressBar父布局中，设置Y方向的偏移量，然后动画循环改变Y坐标，实现斜条滚动的动画效果，当你调用setProgress方法时，则改变其在父布局的X坐标实现进度显示的功能，进度文字同样原理添加到了父布局中。 如何配置build.gradle(Project) allprojects { repositories { ... maven { url 'https://jitpack.io' } } } build.gradle(Module:app) dependencies { compile 'com.github.Ccapton:Android-ColorfulProgressBar:1.0.5' } 主要方法 setStyle(String style) // ColofulProgressBar.STYLE_NORMAL、 ColofulProgressBar.STYLE_COLORFUL两种风格 setMaxProgress(long maxProgress) // 设置进度最大值 setProgress(long progress); //设置当前进度 setSecondProgress(long secondProgress); //设置第二进度 setAnimation(false); // 关闭动画 showPercentText(false); //隐藏进度文字 setHeight(int height); // 设置整个控件高度 setWidth(int width); // 设置整个控件宽度 setProgressColorRes(int progressColorRes); // 设置进度条颜色一 setProgressColor2Res(int progressColor2Res) // 设置进度条颜色二 setPercentColorRes(int percentColorRes); //设置进度文字的颜色 setPercentShaderColorRes(int percentShadeColorRes); //设置进度文字的阴影颜色 setBackgroundColorRes(int backgroundColorRes) //设置控件背景色 使用方法例：在activity_main.xml中， 这是普通效果的Progressbar &lt;com.capton.colorfulprogressbar.ColorfulProgressbar android:id="@+id/colorfulProgressbar" xmlns:app="http://schemas.android.com/apk/res-auto" app:style="@string/style_normal" app:max="100" app:progress="50" app:secondProgress="10" app:progressColor1="@color/green" android:layout_marginTop="16dp" android:layout_width="match_parent" android:layout_height="wrap_content" > 这是双色的Progressbar &lt;com.capton.colorfulprogressbar.ColorfulProgressbar android:id="@+id/colorfulProgressbar2" xmlns:app="http://schemas.android.com/apk/res-auto" app:style="@string/style_colorful" app:max="100" app:progress="50" app:secondProgress="10" app:progressColor1="@color/green" app:progressColor2="@color/orange" android:layout_marginTop="16dp" android:layout_width="match_parent" android:layout_height="wrap_content" > 例：在MainActivity中 ColorfulProgressbar progressbar; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); progressbar= (ColorfulProgressbar) findViewById(R.id.colorfulProgressbar); progressbar.setMaxProgress(100); progressbar.setProgress(50); // progressbar.setSecondProgress(10); // progressbar.setAnimation(false); 关闭动画 // progressbar.showPercentText(false); 隐藏进度文字 } 作者的话 挺漂亮的ProgressBar，就是没啥技术含量。。。。具体需求大家自己随便研究琢磨]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
      <tags>
        <tag>Android开发</tag>
        <tag>Android</tag>
        <tag>自定义View</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件分享-（Mac端）IntelliJ_IDEA_2017破解版]]></title>
    <url>%2F2017%2F05%2F10%2F%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB-%EF%BC%88Mac%E7%AB%AF%EF%BC%89IntelliJ-IDEA-2017%E7%A0%B4%E8%A7%A3%E7%89%88%2F</url>
    <content type="text"><![CDATA[下载IntelliJ IDEA 2017与JetbrainsCrack-2.6.2.jarJetbrainsCrack-2.6.2.jar 链接:http://pan.baidu.com/s/1eRJkOcq 密码:a4ji IntelliJ IDEA 2017版本 链接:http://pan.baidu.com/s/1kVHoZ5t 密码:weu3 找到IntelliJ IDEA，右键显示包内容，将JetbrainsCrack-2.6.2.jar复制到Contents/bin目录下 继续打开Contents/bin目录下目录下idea.vmoptions文件，在文件末尾追加上：-javaagent:JetbrainsCrack-2.6.2.jar 打开运行IntelliJ IDEA，Help-&gt;Register输入一下Code即可激活。{ "licenseId": "ThisCrackLicenseId", "licenseeName": "你的名字", "assigneeName": "", "assigneeEmail": "你的邮箱", "licenseRestriction": "Only Test! Please support genuine!!!", "checkConcurrentUse": false, "products": [ { "code": "II", "paidUpTo": "2099-12-31" }, { "code": "DM", "paidUpTo": "2099-12-31" }, { "code": "AC", "paidUpTo": "2099-12-31" }, { "code": "RS0", "paidUpTo": "2099-12-31" }, { "code": "WS", "paidUpTo": "2099-12-31" }, { "code": "DPN", "paidUpTo": "2099-12-31" }, { "code": "RC", "paidUpTo": "2099-12-31" }, { "code": "PS", "paidUpTo": "2099-12-31" }, { "code": "DC", "paidUpTo": "2099-12-31" }, { "code": "RM", "paidUpTo": "2099-12-31" }, { "code": "CL", "paidUpTo": "2099-12-31" }, { "code": "PC", "paidUpTo": "2099-12-31" } ], "hash": "2911276/0", "gracePeriodDays": 7, "autoProlongated": false } 原文链接：http://blog.csdn.net/zhangyong125/article/details/72804282]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>IntelliJ IDEA_2017</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人开发应用《纯粹漫画》]]></title>
    <url>%2F2017%2F05%2F03%2FPureComic%2F</url>
    <content type="text"><![CDATA[概况应用下载页 http://shouji.baidu.com/software/11411328.html 直接扫码下载apk 《纯粹漫画》是我根据前作《纯粹菜谱》改进而来的新作，这次采用了成熟的图片加载框架Glide，网络请求框架Okhttp和数据解析库Fastjson整合而成的漫画 阅读App。 应用介绍《纯粹漫画》的数据同样来自聚合数据，列表采用了更加高效的RecyclerView，配合图片加载框架Glide，使用户在刷新数据的时候更加流畅地浏览漫画信息。这次加入了广告SDK，在用户刷新列表和搜索漫画时便会展示广告。这次加入了用户登录模块，即用户可以注册本应用账号进行登录、数据更新与恢复。 开发历程一想到漫画所需的翻页元素，就想到了ViewPager，然后便通过加载Fragment展示每一页漫画数据的形式表现出来。但是一开始选用的数据适配器是FragmentPagerAdapter，导致ViewPager不能及时销毁产生的大量FragmentPagerAdapter导致手机内存紧张而卡顿。思考许久，一直以为是图片资源没有回收而导致内存泄漏的问题，后来总算想起来了FragmentStatePagerAdapter这个能自动释放Fragment页面资源的适配器。而漫画有时需要看到细节的地方，所以漫画页面要能实现放大缩小的效果，于是便上网找到了ScaleView https://github.com/Ccapton/Android-ScaleView 这个比较实用的自定义View，将其整合到项目中简直完美了。 作者的话希望看到我这片文章的朋友能对我这个纯粹漫画给些意见，谢谢了]]></content>
      <categories>
        <category>Android个人作品</category>
      </categories>
      <tags>
        <tag>Android开发</tag>
        <tag>Android应用</tag>
        <tag>个人作品</tag>
        <tag>纯粹漫画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人开发应用《纯粹菜谱》]]></title>
    <url>%2F2017%2F02%2F18%2FPureCooking%2F</url>
    <content type="text"><![CDATA[概况应用下载页 http://www.anzhi.com/soft_2761007.html 扫码下载apk 《纯粹菜谱》是我本着练习异步网络请求，数据解析、数据库操作和云后端Bmob的第一个应用。菜谱数据来自聚合数据（已认证本应用）。 应用介绍这是一款提供各式菜肴做法的app，菜谱五花八门，你想得到的菜肴都可通过关键词搜索到。目前只支持QQ认证登录（QQ空间分享），本来想做微信和微博分享的，但是后来我的电脑不小心卡机了，这个应用的源代码都丢失了，也就懒得去弄了。 开发历程由于是第一个Android项目，并没有用到很多第三方库和框架，所以有很多不成熟和冗余的代码。开发过程中，让我受益最多的是，通过自己的代码实践做到了自己想要的效果，例如在Fragment中添加多个子Fragment，并实现父子Fragment的数据通信。还有就是明白了Android应用上市所经历的各个步骤和细节，毕竟一步一个脚印走了过来，途中的艰辛我相信只有与我志同道合有相同经历的朋友才明白。 作者的话希望看到我这片文章的朋友能对我这个纯粹菜谱给些意见，谢谢了]]></content>
      <categories>
        <category>Android个人作品</category>
      </categories>
      <tags>
        <tag>Android开发</tag>
        <tag>Android应用</tag>
        <tag>个人作品</tag>
        <tag>纯粹菜谱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[龙珠Z中热血的bgm]]></title>
    <url>%2F2017%2F02%2F10%2Fshare_music2%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>音乐分享</category>
      </categories>
      <tags>
        <tag>音乐分享</tag>
        <tag>BGM</tag>
        <tag>龙珠</tag>
        <tag>龙珠Z</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[英雄联盟S6全球总决赛 合集]]></title>
    <url>%2F2017%2F01%2F22%2Fshare_music%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>音乐分享</category>
      </categories>
      <tags>
        <tag>音乐分享</tag>
        <tag>英雄联盟</tag>
        <tag>BGM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[软件分享-（Mac端）DiskKeeper_Pro破解版]]></title>
    <url>%2F2016%2F09%2F10%2F%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB-%EF%BC%88Mac%E7%AB%AF%EF%BC%89DiskKeeper-Pro%E7%A0%B4%E8%A7%A3%E7%89%88%2F</url>
    <content type="text"><![CDATA[下载链接https://github.com/Ccapton/FileRepertory/raw/master/files/DiskKeeper.Pro_1.4.13_20170122.dmg DiskKeeper Pro for mac是Mac平台上的一款磁盘碎片整理软件，Diskeeper Pro for mac只要达到预设的垃圾文件的数值就会触发自动清理功能，不会让用户再时常担心磁盘的垃圾问题。提高用户体验度。 功能特点 从菜单栏启动快速清洗 应用缓存和垃圾数据 浏览器缓存和垃圾（Safari，Firefox，Chrome） 用户日志（保持您的保护和垃圾免费） 电子邮件缓存 垃圾箱 其他功能 DiskKeeper Pro有一个可选的自动清理功能，每次达到预设的垃圾邮件大小阈值时都会触发。还支持可选的通知中心报告，通知您已自动清除的垃圾的大小。 高级但易于使用的集成卸载程序。只需删除或移动应用程序到垃圾桶和DiskKeeper Pro将完全卸载它，删除所有剩菜。 DiskKeeper Pro有一个特殊的“保持我清洁”模式。在这种模式下，它将保留在您的菜单栏，准备删除任何种类的快速清洁垃圾。最先进的先进清洁剂，拥有惊人的用户体验。]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>DiskKeeper Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android技术]]></title>
    <url>%2F2016%2F06%2F18%2FAndroid%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[这是新的篇章，敬请期待]]></content>
      <categories>
        <category>Android开发</category>
      </categories>
      <tags>
        <tag>Android开发</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分类]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[关于]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[这是我的个人博客站，上传一些自己写的android代码和技术文章。偶尔分享一些好用的软件，好听的音乐邮箱：437499914@qq.com 、chenweibin1125@foxmail.com微信：Ccapton]]></content>
  </entry>
  <entry>
    <title><![CDATA[board]]></title>
    <url>%2Fboard%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[标签]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
